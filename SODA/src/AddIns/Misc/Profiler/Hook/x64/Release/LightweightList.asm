; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	??3@YAXPEAX0@Z					; operator delete
PUBLIC	??1?$LightweightStack@UStackEntry@@@@QEAA@XZ	; LightweightStack<StackEntry>::~LightweightStack<StackEntry>
PUBLIC	??1ThreadLocalData@@QEAA@XZ			; ThreadLocalData::~ThreadLocalData
PUBLIC	??_GThreadLocalData@@QEAAPEAXI@Z		; ThreadLocalData::`scalar deleting destructor'
EXTRN	__imp_ReleaseMutex:PROC
_bad_alloc_Message DQ FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
PUBLIC	??0LightweightList@@QEAA@PEAX@Z			; LightweightList::LightweightList
; Function compile flags: /Ogtpy
; File c:\local\sharpdevelop_3.2.0.5777_source\src\addins\misc\profiler\hook\lightweightlist.cpp
;	COMDAT ??0LightweightList@@QEAA@PEAX@Z
_TEXT	SEGMENT
this$ = 8
mutex$ = 16
??0LightweightList@@QEAA@PEAX@Z PROC			; LightweightList::LightweightList, COMDAT

; 15   : 	this->lastItem = nullptr;

	mov	QWORD PTR [rcx], 0

; 16   : 	this->mutex = mutex;

	mov	QWORD PTR [rcx+8], rdx

; 17   : }

	mov	rax, rcx
	ret	0
??0LightweightList@@QEAA@PEAX@Z ENDP			; LightweightList::LightweightList
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\new
_TEXT	ENDS
;	COMDAT ??3@YAXPEAX0@Z
_TEXT	SEGMENT
__formal$ = 8
__formal$ = 16
??3@YAXPEAX0@Z PROC					; operator delete, COMDAT

; 64   : 	}

	ret	0
??3@YAXPEAX0@Z ENDP					; operator delete
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
__formal$ = 8
_Where$ = 16
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 59   : 	return (_Where);

	mov	rax, rdx

; 60   : 	}

	ret	0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
; Function compile flags: /Ogtpy
; File c:\local\sharpdevelop_3.2.0.5777_source\src\addins\misc\profiler\hook\lightweightstack.h
;	COMDAT ??1?$LightweightStack@UStackEntry@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1?$LightweightStack@UStackEntry@@@@QEAA@XZ PROC	; LightweightStack<StackEntry>::~LightweightStack<StackEntry>, COMDAT

; 43   : 		stackAllocator.free(array, (arrayEnd - array) * sizeof(T));
; 44   : 	}

	ret	0
??1?$LightweightStack@UStackEntry@@@@QEAA@XZ ENDP	; LightweightStack<StackEntry>::~LightweightStack<StackEntry>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1ThreadLocalData@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1ThreadLocalData@@QEAA@XZ PROC			; ThreadLocalData::~ThreadLocalData, COMDAT
	ret	0
??1ThreadLocalData@@QEAA@XZ ENDP			; ThreadLocalData::~ThreadLocalData
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_GThreadLocalData@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 8
__flags$ = 16
??_GThreadLocalData@@QEAAPEAXI@Z PROC			; ThreadLocalData::`scalar deleting destructor', COMDAT
	mov	rax, rcx
	ret	0
??_GThreadLocalData@@QEAAPEAXI@Z ENDP			; ThreadLocalData::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?remove@LightweightList@@QEAAXPEAUThreadLocalData@@@Z ; LightweightList::remove
;	COMDAT pdata
; File c:\local\sharpdevelop_3.2.0.5777_source\src\addins\misc\profiler\hook\allocator.cpp
pdata	SEGMENT
$pdata$?remove@LightweightList@@QEAAXPEAUThreadLocalData@@@Z DD imagerel $LN12
	DD	imagerel $LN12+127
	DD	imagerel $unwind$?remove@LightweightList@@QEAAXPEAUThreadLocalData@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?remove@LightweightList@@QEAAXPEAUThreadLocalData@@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\local\sharpdevelop_3.2.0.5777_source\src\addins\misc\profiler\hook\lightweightlist.cpp
xdata	ENDS
;	COMDAT ?remove@LightweightList@@QEAAXPEAUThreadLocalData@@@Z
_TEXT	SEGMENT
this$ = 48
item$ = 56
?remove@LightweightList@@QEAAXPEAUThreadLocalData@@@Z PROC ; LightweightList::remove, COMDAT

; 46   : {

$LN12:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, QWORD PTR ?allThreadLocalDatas@@3PEAVLightweightList@@EA ; allThreadLocalDatas
	mov	rdi, rdx

; 47   : 	WaitForSingleObject(this->mutex, INFINITE);

	or	edx, -1					; ffffffffH
	mov	rcx, QWORD PTR [rbx+8]
	call	QWORD PTR __imp_WaitForSingleObject

; 48   : 
; 49   : 	assert(item != nullptr);
; 50   : 	assert(this->lastItem != nullptr);
; 51   : 
; 52   : 	if (item == this->lastItem) {

	mov	rax, QWORD PTR [rbx]
	cmp	rdi, rax
	jne	SHORT $LN4@remove

; 53   : 		this->lastItem = this->lastItem->predecessor;

	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rbx], rax

; 54   : 		if (this->lastItem != nullptr)

	test	rax, rax
	je	SHORT $LN1@remove

; 55   : 			this->lastItem->follower = nullptr;

	mov	QWORD PTR [rax+16], 0

; 56   : 	} else {

	jmp	SHORT $LN1@remove
$LN4@remove:

; 57   : 		item->follower->predecessor = item->predecessor;

	mov	rcx, QWORD PTR [rdi+16]
	mov	rax, QWORD PTR [rdi+8]
	mov	QWORD PTR [rcx+8], rax

; 58   : 		if (item->predecessor != nullptr)

	mov	rcx, QWORD PTR [rdi+8]
	test	rcx, rcx
	je	SHORT $LN1@remove

; 59   : 			item->predecessor->follower = item->follower;

	mov	rax, QWORD PTR [rdi+16]
	mov	QWORD PTR [rcx+16], rax
$LN1@remove:

; 60   : 	}
; 61   : 
; 62   : 	item->~ThreadLocalData();
; 63   : 
; 64   : 	stackAllocator.free(item, sizeof(ThreadLocalData));
; 65   : 
; 66   : 	sharedMemoryHeader->LastThreadListItem = this->lastItem;

	mov	rcx, QWORD PTR [rbx]
	mov	rax, QWORD PTR ?sharedMemoryHeader@@3PEAUSharedMemoryHeader@@EA ; sharedMemoryHeader
	mov	QWORD PTR [rax+48], rcx

; 67   : 
; 68   : 	ReleaseMutex(this->mutex);

	mov	rcx, QWORD PTR [rbx+8]

; 69   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	rex_jmp	QWORD PTR __imp_ReleaseMutex
?remove@LightweightList@@QEAAXPEAUThreadLocalData@@@Z ENDP ; LightweightList::remove
PUBLIC	?add@LightweightList@@QEAAPEAUThreadLocalData@@XZ ; LightweightList::add
;	COMDAT pdata
; File c:\local\sharpdevelop_3.2.0.5777_source\src\addins\misc\profiler\hook\allocator.cpp
pdata	SEGMENT
$pdata$?add@LightweightList@@QEAAPEAUThreadLocalData@@XZ DD imagerel $LN21
	DD	imagerel $LN21+224
	DD	imagerel $unwind$?add@LightweightList@@QEAAPEAUThreadLocalData@@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?add@LightweightList@@QEAAPEAUThreadLocalData@@XZ DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\local\sharpdevelop_3.2.0.5777_source\src\addins\misc\profiler\hook\lightweightlist.cpp
xdata	ENDS
;	COMDAT ?add@LightweightList@@QEAAPEAUThreadLocalData@@XZ
_TEXT	SEGMENT
this$ = 48
?add@LightweightList@@QEAAPEAUThreadLocalData@@XZ PROC	; LightweightList::add, COMDAT

; 20   : {

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, QWORD PTR ?allThreadLocalDatas@@3PEAVLightweightList@@EA ; allThreadLocalDatas

; 21   : 	WaitForSingleObject(this->mutex, INFINITE);

	or	edx, -1					; ffffffffH
	mov	rcx, QWORD PTR [rdi+8]
	call	QWORD PTR __imp_WaitForSingleObject

; 22   : 
; 23   : 	void *itemMemory = stackAllocator.malloc(sizeof(ThreadLocalData));

	mov	ebx, 48					; 00000030H
	lock xadd QWORD PTR ?stackAllocator@@3UfastAllocator@@A+8, rbx
	mov	rax, QWORD PTR ?stackAllocator@@3UfastAllocator@@A+16
	sub	rax, rbx
	cmp	rax, 48					; 00000030H

; 24   : 	assert(itemMemory != nullptr);
; 25   : 	ThreadLocalData *item = new (itemMemory) ThreadLocalData();

	jle	SHORT $LN5@add
	test	rbx, rbx
	je	SHORT $LN5@add
	mov	edx, 1536				; 00000600H
	lock xadd QWORD PTR ?stackAllocator@@3UfastAllocator@@A+8, rdx
	mov	rax, QWORD PTR ?stackAllocator@@3UfastAllocator@@A+16
	xor	ecx, ecx
	sub	rax, rdx
	cmp	rax, 1536				; 00000600H
	cmovg	rcx, rdx
	mov	QWORD PTR [rbx+24], rcx
	lea	rax, QWORD PTR [rcx+1536]
	mov	QWORD PTR [rbx+40], rax
	lea	rax, QWORD PTR [rcx-24]
	mov	QWORD PTR [rbx+32], rax
	call	QWORD PTR __imp_GetCurrentThreadId
	mov	DWORD PTR [rbx], eax
	jmp	SHORT $LN6@add
$LN5@add:
	xor	ebx, ebx
$LN6@add:

; 26   : 
; 27   : 	if (this->lastItem == nullptr) {

	mov	rax, QWORD PTR [rdi]
	test	rax, rax
	jne	SHORT $LN2@add

; 28   : 		this->lastItem = item;

	mov	QWORD PTR [rdi], rbx

; 29   : 		this->lastItem->follower = nullptr;

	mov	QWORD PTR [rbx+16], rax

; 30   : 		this->lastItem->predecessor = nullptr;

	mov	rax, QWORD PTR [rdi]
	mov	QWORD PTR [rax+8], 0

; 31   : 	} else {

	jmp	SHORT $LN1@add
$LN2@add:

; 32   : 		this->lastItem->follower = item;

	mov	QWORD PTR [rax+16], rbx

; 33   : 		item->follower = nullptr;

	mov	QWORD PTR [rbx+16], 0

; 34   : 		item->predecessor = this->lastItem;

	mov	rcx, QWORD PTR [rdi]
	mov	QWORD PTR [rbx+8], rcx

; 35   : 		this->lastItem = item;

	mov	QWORD PTR [rdi], rbx
$LN1@add:

; 36   : 	}
; 37   : 
; 38   : 	sharedMemoryHeader->LastThreadListItem = this->lastItem;

	mov	rcx, QWORD PTR ?sharedMemoryHeader@@3PEAUSharedMemoryHeader@@EA ; sharedMemoryHeader
	mov	rdx, QWORD PTR [rdi]
	mov	QWORD PTR [rcx+48], rdx

; 39   : 
; 40   : 	ReleaseMutex(this->mutex);

	mov	rcx, QWORD PTR [rdi+8]
	call	QWORD PTR __imp_ReleaseMutex

; 41   : 
; 42   : 	return item;

	mov	rax, rbx

; 43   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?add@LightweightList@@QEAAPEAUThreadLocalData@@XZ ENDP	; LightweightList::add
END
